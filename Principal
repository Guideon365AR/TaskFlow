<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplicación de Tareas</title>
    
    <!-- React y Babel -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    
    <!-- Babel (Transpilador de JSX) -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Google Fonts -->
     <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Un fondo suave para la página */
        }
    </style>
</head>
<body>
    <div id="root" class="flex items-center justify-center min-h-screen"></div>

    <script type="text/babel">
        const { useState, useReducer, useEffect, useRef } = React;

        // --- ESTILOS CSS PARA ANIMACIONES ---
        const AppStyles = () => (
            <style>{`
                .fade-in {
                    animation: fadeIn 0.3s ease-in-out;
                }
                .modal-enter {
                    animation: modal-enter 0.3s ease-out forwards;
                }
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                @keyframes modal-enter {
                    from { opacity: 0; transform: translateY(30px) scale(0.95); }
                    to { opacity: 1; transform: translateY(0) scale(1); }
                }
            `}</style>
        );

        // --- COMPONENTES DE ICONOS (SVGs en línea) ---
        const Icon = ({ children, className, viewBox = "0 0 24 24" }) => (
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox={viewBox} fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                {children}
            </svg>
        );
        const Home = ({ className }) => <Icon className={className}><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" /><polyline points="9 22 9 12 15 12 15 22" /></Icon>;
        const Calendar = ({ className }) => <Icon className={className}><rect x="3" y="4" width="18" height="18" rx="2" ry="2" /><line x1="16" y1="2" x2="16" y2="6" /><line x1="8" y1="2" x2="8" y2="6" /><line x1="3" y1="10" x2="21" y2="10" /></Icon>;
        const Plus = ({ className }) => <Icon className={className}><line x1="12" y1="5" x2="12" y2="19" /><line x1="5" y1="12" x2="19" y2="12" /></Icon>;
        const User = ({ className }) => <Icon className={className}><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" /><circle cx="12" cy="7" r="4" /></Icon>;
        const ArrowLeft = ({ className }) => <Icon className={className}><line x1="19" y1="12" x2="5" y2="12" /><polyline points="12 19 5 12 12 5" /></Icon>;
        const MoreHorizontal = ({ className }) => <Icon className={className}><circle cx="12" cy="12" r="1" /><circle cx="19" cy="12" r="1" /><circle cx="5" cy="12" r="1" /></Icon>;
        const Edit = ({ className }) => <Icon className={className}><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" /><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" /></Icon>;
        const X = ({ className }) => <Icon className={className}><line x1="18" y1="6" x2="6" y2="18" /><line x1="6" y1="6" x2="18" y2="18" /></Icon>;
        const Clock = ({ className }) => <Icon className={className}><circle cx="12" cy="12" r="10" /><polyline points="12 6 12 12 16 14" /></Icon>;
        const LogOut = ({ className }) => <Icon className={className}><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" /><polyline points="16 17 21 12 16 7" /><line x1="21" y1="12" x2="9" y2="12" /></Icon>;
        const Trash = ({ className }) => <Icon className={className}><polyline points="3 6 5 6 21 6" /><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" /></Icon>;
        const Instagram = ({ className }) => <Icon className={className}><rect x="2" y="2" width="20" height="20" rx="5" ry="5" /><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" /><line x1="17.5" y1="6.5" x2="17.51" y2="6.5" /></Icon>;
        const Linkedin = ({ className }) => <Icon className={className}><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" /><rect x="2" y="9" width="4" height="12" /><circle cx="4" cy="4" r="2" /></Icon>;
        const TwitterX = ({ className }) => <Icon className={className} viewBox="0 0 300 300"><path d="M178.57 127.15 290.27 0h-26.46l-97.03 110.38L89.34 0H0l117.13 166.93L0 300.25h26.46l102.4-116.59 81.8 116.59h89.34L178.57 127.15zM142.57 174.4L132.3 160.4l-93.5-133.2h40.4l75.8 107.75 11.1 15.8 96.8 137.95h-40.4l-78.2-111.45z" fill="currentColor"/></Icon>;
        const Globe = ({ className }) => <Icon className={className}><circle cx="12" cy="12" r="10" /><line x1="2" y1="12" x2="22" y2="12" /><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" /></Icon>;


        // --- LÓGICA DE ESTADO (REDUCER) ---

        const ACTIONS = {
            SET_STATE: 'set-state',
            RESET_STATE: 'reset-state',
            UPDATE_PROFILE: 'update-profile',
            ADD_TASK: 'add-task',
            UPDATE_TASK: 'update-task',
            DELETE_TASK: 'delete-task',
        };

        const defaultData = {
            userProfile: { name: 'Gustavo', email: 'gustavo@email.com' },
            tasks: [
                { id: 1, text: 'Investigación de Mercado', time: '10:00', status: 'Completada', date: '2025-07-10' },
                { id: 2, text: 'Análisis Competitivo', time: '12:00', status: 'En Progreso', date: '2025-07-10' },
                { id: 3, text: 'Crear Wireframes de baja fidelidad', time: '19:00', status: 'Pendiente', date: '2025-07-11' },
                { id: 4, text: 'Revisión de fin de semana', time: '11:00', status: 'Pendiente', date: '2025-07-12' },
                { id: 5, text: 'Preparar la semana', time: '18:00', status: 'Pendiente', date: '2025-07-13' },
            ],
        };


        function appReducer(state, action) {
            switch (action.type) {
                case ACTIONS.SET_STATE:
                    return action.payload;
                case ACTIONS.RESET_STATE:
                    return defaultData;
                case ACTIONS.UPDATE_PROFILE:
                    return { ...state, userProfile: action.payload };
                case ACTIONS.ADD_TASK:
                    return { ...state, tasks: [...state.tasks, action.payload] };
                case ACTIONS.UPDATE_TASK:
                    return { ...state, tasks: state.tasks.map(t => t.id === action.payload.id ? action.payload : t) };
                case ACTIONS.DELETE_TASK:
                    return { ...state, tasks: state.tasks.filter(t => t.id !== action.payload.id) };
                default:
                    return state;
            }
        }

        // --- COMPONENTES ---
        const OnboardingScreen = ({ onStart }) => (
            <div className="flex flex-col h-full bg-gradient-to-br from-purple-50 via-blue-50 to-white text-center fade-in">
                <div className="p-6 pt-12">
                    <div className="inline-block bg-purple-600 text-white py-4 px-8 rounded-xl shadow-lg">
                        <h1 className="text-3xl font-bold">TaskFlow</h1>
                        <p className="mt-1 text-lg opacity-90">¡Organíza tu Día!</p>
                    </div>
                </div>
                <div className="flex-grow flex items-center justify-center px-6">
                    <img src="https://images.undraw.co/drawings/completed_tasks_vs-6-q.svg" alt="Organizando Tareas" className="max-w-sm w-full mx-auto" />
                </div>
                <div className="p-6">
                    <button onClick={onStart} className="w-full bg-purple-600 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:bg-purple-700 transition-all duration-300 flex items-center justify-center text-lg">Ingresar <ArrowLeft className="w-6 h-6 ml-2 transform rotate-180" /></button>
                    <div className="w-full bg-white text-gray-500 text-sm py-4 px-6 rounded-xl shadow-lg mt-8">
                        <p>Hecho con 💜 por GECEM</p>
                        <div className="flex justify-center space-x-4 mt-3">
                            <a href="#" className="text-gray-500 hover:text-gray-700"><Instagram className="w-5 h-5" /></a>
                            <a href="#" className="text-gray-500 hover:text-gray-700"><Linkedin className="w-5 h-5" /></a>
                            <a href="#" className="text-gray-500 hover:text-gray-700"><TwitterX className="w-5 h-5" /></a>
                            <a href="#" className="text-gray-500 hover:text-gray-700"><Globe className="w-5 h-5" /></a>
                        </div>
                    </div>
                </div>
            </div>
        );

        const HeaderMenu = ({ navigateTo, closeMenu }) => {
            const menuRef = useRef();
            useEffect(() => {
                const handleClickOutside = (event) => { if (menuRef.current && !menuRef.current.contains(event.target)) { closeMenu(); } };
                document.addEventListener("mousedown", handleClickOutside);
                return () => document.removeEventListener("mousedown", handleClickOutside);
            }, [closeMenu]);
            const handleNavigate = (screen) => { navigateTo(screen); closeMenu(); };
            return (
                <div ref={menuRef} className="absolute top-16 right-6 bg-white rounded-lg shadow-xl w-48 z-50 overflow-hidden fade-in">
                    <button onClick={() => handleNavigate('inicio')} className="flex items-center w-full text-left px-4 py-3 text-sm text-gray-700 hover:bg-gray-100"><Home className="w-5 h-5 mr-3" /> Inicio</button>
                    <button onClick={() => handleNavigate('tasks')} className="flex items-center w-full text-left px-4 py-3 text-sm text-gray-700 hover:bg-gray-100"><Calendar className="w-5 h-5 mr-3" /> Tareas</button>
                    <button onClick={() => handleNavigate('profile')} className="flex items-center w-full text-left px-4 py-3 text-sm text-gray-700 hover:bg-gray-100"><User className="w-5 h-5 mr-3" /> Perfil</button>
                </div>
            );
        };

        const AppHeader = ({ title, isHome = false, navigateTo, onBack, userName }) => {
            const [isMenuOpen, setMenuOpen] = useState(false);
            return (
                <header className="flex items-center justify-between relative h-10 z-20">
                    <div className="absolute left-0 top-1/2 -translate-y-1/2">
                        {onBack && <button onClick={onBack} className="p-2 -ml-2"><ArrowLeft className="w-6 h-6 text-gray-600" /></button>}
                    </div>
                    <div className="flex-1 flex justify-center">
                        {isHome ? (
                            <div className="flex items-center absolute left-0"><img src={`https://placehold.co/40x40/6B4EFF/FFFFFF?text=${userName.charAt(0)}`} alt="Avatar" className="w-10 h-10 rounded-full mr-3" /><div><p className="text-sm text-gray-500">¡Hola!</p><h2 className="font-bold text-lg text-gray-800">{userName}</h2></div></div>
                        ) : (
                            <h2 className="text-xl font-bold text-gray-800">{title}</h2>
                        )}
                    </div>
                    <div className="absolute right-0 top-1/2 -translate-y-1/2">
                        <button onClick={() => setMenuOpen(o => !o)} className="p-2 rounded-full bg-white shadow-sm"><MoreHorizontal className="text-gray-600" /></button>
                        {isMenuOpen && <HeaderMenu navigateTo={navigateTo} closeMenu={() => setMenuOpen(false)} />}
                    </div>
                </header>
            );
        };

        const CircularProgress = ({ percentage, size = 100 }) => {
            const sqSize = size;
            const strokeWidth = size * 0.1;
            const radius = (sqSize - strokeWidth) / 2;
            const viewBox = `0 0 ${sqSize} ${sqSize}`;
            const dashArray = radius * Math.PI * 2;
            const dashOffset = dashArray - (dashArray * percentage) / 100;
            const fontSizeClass = size > 80 ? 'text-2xl' : 'text-lg';

            return (
                <svg width={sqSize} height={sqSize} viewBox={viewBox} className="transform -rotate-90 flex-shrink-0">
                    <circle className="text-white" cx={sqSize / 2} cy={sqSize / 2} r={radius} strokeWidth={`${strokeWidth}px`} fill="none" stroke="currentColor" />
                    <circle className="text-black" cx={sqSize / 2} cy={sqSize / 2} r={radius} strokeWidth={`${strokeWidth}px`} strokeLinecap="round" stroke="currentColor" fill="none" style={{ strokeDasharray: dashArray, strokeDashoffset: dashOffset, transition: 'stroke-dashoffset 1s ease-in-out' }}/>
                    <text x="50%" y="50%" dy=".3em" textAnchor="middle" className={`font-bold text-white fill-current transform rotate-90 ${fontSizeClass}`} style={{ transformOrigin: '50% 50%' }}>{`${Math.round(percentage)}%`}</text>
                </svg>
            );
        };

        const DashboardScreen = ({ state, navigateTo, onTaskClick }) => {
            const { tasks, userProfile } = state;
            const totalTasks = tasks.length;
            const completedTasks = tasks.filter(t => t.status === 'Completada').length;
            const overallProgress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
            
            return (
                <div className="p-6 bg-gray-50 min-h-full">
                    <AppHeader isHome={true} navigateTo={navigateTo} userName={userProfile.name} />
                    <div className="bg-gradient-to-br from-purple-600 to-indigo-600 rounded-2xl p-4 mt-12 mb-8 text-white flex items-center justify-between shadow-lg">
                        <div>
                            <h3 className="font-bold text-xl mb-2 min-h-[3.5rem]">
                                {
                                    overallProgress === 100 ? '¡Excelente! Todas tus tareas están completadas!' :
                                    overallProgress >= 75 ? '¡Tus tareas están casi listas!' :
                                    overallProgress < 50 ? <span>¡Ánimo! Tienes mucha<br/>acción por delante</span> :
                                    'Estas son tus tareas'
                                }
                            </h3>
                        </div>
                        <CircularProgress percentage={overallProgress} size={75} />
                    </div>
                    <section>
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-xl font-bold text-gray-800">Tareas Recientes</h3>
                            <button 
                                onClick={() => navigateTo('tasks')} 
                                className="bg-purple-600 text-white font-bold w-12 h-12 rounded-full flex items-center justify-center text-sm shadow-lg hover:bg-purple-700 transition-colors"
                            >
                                Todas
                            </button>
                        </div>
                        {tasks.slice(0, 5).map(task => (
                             <button key={task.id} onClick={() => onTaskClick({type: 'task', data: task})} className="w-full text-left bg-white p-4 rounded-xl mb-3 shadow-sm flex justify-between items-center transition-transform hover:scale-[1.02]">
                                <div className="flex items-center">
                                    <div className={`w-1 h-12 rounded-full mr-3 ${task.status === 'Completada' ? 'bg-green-500' : task.status === 'En Progreso' ? 'bg-yellow-500' : 'bg-red-500'}`}></div>
                                    <div>
                                        <p className="font-bold text-gray-800">{task.text}</p>
                                        <p className="text-gray-500 text-sm flex items-center mt-1"><Clock className="w-3 h-3 mr-1" /> {task.time}</p>
                                    </div>
                                </div>
                            </button>
                        ))}
                    </section>
                </div>
            );
        };

        const TasksScreen = ({ state, navigateTo, onTaskClick }) => {
            const [selectedDate, setSelectedDate] = useState(new Date());

            const getWeekDays = (currentDate) => {
                const week = [];
                const d = new Date(currentDate);
                const day = d.getDay();
                const diff = d.getDate() - day; // Sunday is the start of the week (0)
                const sunday = new Date(d.setDate(diff));

                for (let i = 0; i < 7; i++) {
                    const dayInWeek = new Date(sunday);
                    dayInWeek.setDate(sunday.getDate() + i);
                    week.push(dayInWeek);
                }
                return week;
            };
            
            const days = getWeekDays(selectedDate);
            const weekdayFormatter = new Intl.DateTimeFormat('es-ES', { weekday: 'short' });

            const allTasksSorted = [...state.tasks].sort((a,b) => new Date(a.date) - new Date(b.date));

            const getStatusChip = (status) => {
                const styles = { 'Completada': "text-green-600 bg-green-100", 'En Progreso': "text-yellow-600 bg-yellow-100", 'Pendiente': "text-red-600 bg-red-100" };
                return <span className={`text-xs font-bold py-1 px-3 rounded-full ${styles[status]}`}>{status}</span>;
            };

            return (
                <div className="p-6 bg-gray-50 min-h-full">
                    <AppHeader title="Tareas" navigateTo={navigateTo} onBack={() => navigateTo('inicio')} />
                    <div className="flex justify-between items-center mt-8 mb-6">
                        {days.map((d, index) => {
                            const isSelected = d.toDateString() === selectedDate.toDateString();
                            const today = new Date();
                            const isToday = d.toDateString() === today.toDateString();
                            let borderClass = 'border-2 border-transparent';
                            if (isToday && !isSelected) {
                                borderClass = 'border-2 border-purple-600';
                            } else if (isToday && isSelected) {
                                borderClass = 'border-2 border-white';
                            }
                            const hasTasks = state.tasks.some(task => {
                                const taskDate = new Date(task.date + 'T00:00:00');
                                return taskDate.toDateString() === d.toDateString();
                            });
                            return (
                                <button 
                                    key={index} 
                                    onClick={() => setSelectedDate(d)}
                                    className={`relative flex flex-col items-center p-2 rounded-lg w-12 transition-all ${isSelected ? 'bg-purple-600 text-white shadow-lg' : 'bg-white text-gray-600'} ${borderClass}`}
                                >
                                    <span className="text-lg font-bold">{d.getDate()}</span>
                                    <span className="text-xs capitalize">{weekdayFormatter.format(d).replace('.', '')}</span>
                                    {hasTasks && <div className={`w-4 h-0.5 absolute bottom-1.5 ${isSelected ? 'bg-white' : 'bg-purple-500'}`}></div>}
                                </button>
                            );
                        })}
                    </div>
                    
                    <div>{allTasksSorted.length > 0 ? allTasksSorted.map(task => (
                        <button key={task.id} onClick={() => onTaskClick({type: 'task', data: task})} className="w-full text-left bg-white p-4 rounded-xl mb-3 shadow-sm flex justify-between items-center transition-transform hover:scale-[1.02]">
                            <div className="flex items-center">
                                <div className={`w-1 h-12 rounded-full mr-3 ${task.status === 'Completada' ? 'bg-green-500' : task.status === 'En Progreso' ? 'bg-yellow-500' : 'bg-red-500'}`}></div>
                                <div>
                                    <p className="font-bold text-gray-800">{task.text}</p>
                                    <p className="text-xs text-gray-400 flex items-center mt-1"><Calendar className="w-3 h-3 mr-1" /> {task.date}</p>
                                    <p className="text-gray-500 text-sm flex items-center mt-1"><Clock className="w-3 h-3 mr-1" /> {task.time}</p>
                                </div>
                            </div>
                            {getStatusChip(task.status)}
                        </button>
                    )) : <p className="text-center text-gray-500 mt-10">No hay tareas.</p>}</div>
                </div>
            );
        };

        const ProfileScreen = ({ state, dispatch, navigateTo, onEditProfileClick }) => {
            const { userProfile, tasks } = state;
            const completedTasks = tasks.filter(t => t.status === 'Completada').length;
            const handleClearData = () => { if (window.confirm("¿Estás seguro de que quieres eliminar todos los datos? Esta acción no se puede deshacer.")) { dispatch({ type: ACTIONS.RESET_STATE }); } };
            const handleLogout = () => { if (window.confirm("¿Estás seguro de que quieres cerrar sesión?")) { navigateTo('onboarding'); } };
            return (
                <div className="p-6 bg-gray-50 min-h-full">
                    <AppHeader title="Perfil" navigateTo={navigateTo} onBack={() => navigateTo('inicio')} />
                    <div className="flex flex-col items-center mt-8">
                        <img src={`https://placehold.co/80x80/6B4EFF/FFFFFF?text=${userProfile.name.charAt(0)}`} alt="Avatar" className="w-20 h-20 rounded-full mb-4 ring-4 ring-white shadow-lg" />
                        <h2 className="text-2xl font-bold text-gray-800">{userProfile.name}</h2>
                        <p className="text-gray-500">{userProfile.email}</p>
                    </div>
                    <div className="mt-8 grid grid-cols-2 gap-4 text-center">
                        <div className="bg-white p-4 rounded-xl shadow-sm"><p className="text-2xl font-bold text-purple-600">{tasks.length}</p><p className="text-sm text-gray-500">Tareas Totales</p></div>
                        <div className="bg-white p-4 rounded-xl shadow-sm"><p className="text-2xl font-bold text-purple-600">{completedTasks}</p><p className="text-sm text-gray-500">Tareas Completadas</p></div>
                    </div>
                    <div className="mt-8 space-y-4">
                        <button onClick={onEditProfileClick} className="w-full flex items-center justify-center bg-purple-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg hover:bg-purple-700 transition-colors">
                            <Edit className="w-5 h-5 mr-2" />
                            Editar Perfil
                        </button>
                        <button onClick={handleClearData} className="w-full flex items-center justify-center bg-red-500 text-white font-bold py-3 px-4 rounded-xl shadow-lg hover:bg-red-600 transition-colors"><Trash className="w-5 h-5 mr-2" /> Limpiar Datos</button>
                        <button onClick={handleLogout} className="w-full flex items-center justify-center bg-gray-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg hover:bg-gray-700 transition-colors"><LogOut className="w-5 h-5 mr-2" /> Cerrar Sesión</button>
                    </div>
                </div>
            );
        };

        const ManagementModal = ({ state, dispatch, closeModal, editingItem, setEditingItem }) => {
            const [taskText, setTaskText] = useState('');
            const [taskTime, setTaskTime] = useState('12:00');
            const [taskDate, setTaskDate] = useState(new Date().toISOString().split('T')[0]);
            const [taskStatus, setTaskStatus] = useState('Pendiente');
            
            useEffect(() => {
                if (editingItem) {
                    setTaskText(editingItem.data.text); 
                    setTaskTime(editingItem.data.time); 
                    setTaskDate(editingItem.data.date || new Date().toISOString().split('T')[0]); 
                    setTaskStatus(editingItem.data.status);
                }
            }, [editingItem]);

            const resetForms = () => {
                setEditingItem(null);
                setTaskText(''); 
                setTaskTime('12:00'); 
                setTaskDate(new Date().toISOString().split('T')[0]); 
                setTaskStatus('Pendiente');
            };

            const handleClose = () => {
                resetForms();
                closeModal();
            };

            const handleTaskSubmit = (e) => { 
                e.preventDefault(); 
                if (!taskText) { 
                    alert("Por favor, completa el texto de la tarea."); 
                    return; 
                } 
                const payload = { 
                    id: editingItem?.data.id || Date.now(), 
                    text: taskText, 
                    time: taskTime, 
                    date: taskDate, 
                    status: taskStatus 
                }; 
                dispatch({ type: editingItem ? ACTIONS.UPDATE_TASK : ACTIONS.ADD_TASK, payload }); 
                handleClose();
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-gray-50 rounded-2xl w-full max-w-md flex flex-col modal-enter">
                        <div className="flex justify-between items-center p-4 border-b"><h3 className="text-lg font-bold">{editingItem ? 'Editar Tarea' : 'Crear Tarea'}</h3><button onClick={handleClose}><X className="w-6 h-6 text-gray-500" /></button></div>
                        <div className="p-4 overflow-y-auto">
                            <form onSubmit={handleTaskSubmit} className="bg-white p-4 rounded-lg space-y-3">
                                <input type="text" value={taskText} onChange={e => setTaskText(e.target.value)} placeholder="Descripción de la tarea" className="w-full bg-gray-100 p-2 rounded-lg" />
                                <div className="flex gap-2">
                                    <input type="time" value={taskTime} onChange={e => setTaskTime(e.target.value)} className="w-1/2 bg-gray-100 p-2 rounded-lg" />
                                    <input type="date" value={taskDate} onChange={e => setTaskDate(e.target.value)} className="w-1/2 bg-gray-100 p-2 rounded-lg" />
                                </div>
                                <select value={taskStatus} onChange={e => setTaskStatus(e.target.value)} className="w-full bg-gray-100 p-2 rounded-lg">
                                    {['Pendiente', 'En Progreso', 'Completada'].map(s => <option key={s} value={s}>{s}</option>)}
                                </select>
                                <div className="flex gap-2 pt-2">
                                    <button type="submit" className="w-full bg-purple-600 text-white font-bold py-2 rounded-lg">{editingItem ? 'Guardar Cambios' : 'Crear Tarea'}</button>
                                    {editingItem && <button type="button" onClick={handleClose} className="w-full bg-gray-200 text-gray-700 font-bold py-2 rounded-lg">Cancelar</button>}
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            );
        };

        const ProfileModal = ({ userProfile, dispatch, closeModal }) => {
            const [name, setName] = useState(userProfile.name);
            const [email, setEmail] = useState(userProfile.email);

            const handleSubmit = (e) => {
                e.preventDefault();
                dispatch({ type: ACTIONS.UPDATE_PROFILE, payload: { name, email } });
                closeModal();
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-gray-50 rounded-2xl w-full max-w-md flex flex-col modal-enter">
                        <div className="flex justify-between items-center p-4 border-b"><h3 className="text-lg font-bold">Editar Perfil</h3><button onClick={closeModal}><X className="w-6 h-6 text-gray-500" /></button></div>
                        <div className="p-4 overflow-y-auto">
                            <form onSubmit={handleSubmit} className="bg-white p-4 rounded-lg space-y-3">
                                <div><label className="text-sm font-medium text-gray-600">Nombre</label><input type="text" value={name} onChange={e => setName(e.target.value)} className="w-full bg-gray-100 p-2 rounded-lg mt-1" /></div>
                                <div><label className="text-sm font-medium text-gray-600">Email</label><input type="email" value={email} onChange={e => setEmail(e.target.value)} className="w-full bg-gray-100 p-2 rounded-lg mt-1" /></div>
                                <div className="flex gap-2 pt-2">
                                    <button type="submit" className="w-full bg-purple-600 text-white font-bold py-2 rounded-lg">Guardar Cambios</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            );
        };

        function App() {
            const [currentScreen, setCurrentScreen] = useState('onboarding');
            const [state, dispatch] = useReducer(appReducer, defaultData);
            const [isTaskModalOpen, setTaskModalOpen] = useState(false);
            const [isProfileModalOpen, setProfileModalOpen] = useState(false);
            const [editingItem, setEditingItem] = useState(null);

            useEffect(() => {
                try { const savedState = localStorage.getItem('todoAppSimplifiedState'); if (savedState) { dispatch({ type: ACTIONS.SET_STATE, payload: JSON.parse(savedState) }); } } 
                catch (error) { console.error("Failed to parse state from localStorage", error); }
            }, []);

            useEffect(() => { localStorage.setItem('todoAppSimplifiedState', JSON.stringify(state)); }, [state]);

            const navigateTo = (screen) => setCurrentScreen(screen);

            const handleOpenTaskModal = (item = null) => {
                setEditingItem(item);
                setTaskModalOpen(true);
            };

            const handleCloseTaskModal = () => {
                setTaskModalOpen(false);
                setEditingItem(null);
            };
            
            const handleOpenProfileModal = () => {
                setProfileModalOpen(true);
            };

            const handleCloseProfileModal = () => {
                setProfileModalOpen(false);
            };

            const renderScreen = () => {
                switch (currentScreen) {
                    case 'onboarding': return <OnboardingScreen onStart={() => navigateTo('inicio')} />;
                    case 'inicio': return <DashboardScreen state={state} navigateTo={navigateTo} onTaskClick={handleOpenTaskModal} />;
                    case 'tasks': return <TasksScreen state={state} navigateTo={navigateTo} onTaskClick={handleOpenTaskModal} />;
                    case 'profile': return <ProfileScreen state={state} dispatch={dispatch} navigateTo={navigateTo} onEditProfileClick={handleOpenProfileModal} />;
                    default: return <DashboardScreen state={state} navigateTo={navigateTo} />;
                }
            };

            return (
                <div className="w-full max-w-md mx-auto h-[800px] bg-white rounded-3xl shadow-2xl overflow-hidden relative font-sans">
                    <AppStyles />
                    <main className="h-full overflow-y-auto pb-20">
                        <div key={currentScreen} className="fade-in">
                            {renderScreen()}
                        </div>
                    </main>
                    {currentScreen !== 'onboarding' && currentScreen !== 'profile' && (
                        <button onClick={() => handleOpenTaskModal(null)} className="absolute bottom-6 right-6 w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center shadow-lg z-10 hover:scale-110 active:scale-95 transition-transform">
                            <Plus className="w-6 h-6 text-white" />
                        </button>
                    )}
                    {isTaskModalOpen && <ManagementModal state={state} dispatch={dispatch} closeModal={handleCloseTaskModal} editingItem={editingItem} setEditingItem={setEditingItem} />}
                    {isProfileModalOpen && <ProfileModal userProfile={state.userProfile} dispatch={dispatch} closeModal={handleCloseProfileModal} />}
                </div>
            );
        }

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
